{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A Discord bot framework build on Discordia Modules Module Description argparse A module to parse arguments into a table dotenv A module to parse a .env file helper The root of all the modules logger A module to make logging with colors easier lua Allows lua to create and extend classes util A utility module for time, moderation, and permissions Classes Module Description Array An array with helper functions Template A template for creating embeds and more templates client The helper client, extends a Discordia client command A command helper class, should be extended embed A embed helper class emitter A embed helper class event An event class, should be extended help The default help, extends command luaCommand Makes creating commands with pure lua easier plugin A plugin that functions like a dpy cog, should be extended prompt A prompt helper class status A command for testing to check the status of your tests Topics Module Description 01-simple-bot.md 02-embed-events.md readme.md Examples Module Description advanced-arguments.moon command.moon embeds.moon event.moon plugin.moon","title":"Home"},{"location":"#a-discord-bot-framework-build-on-discordia","text":"","title":"A Discord bot framework build on Discordia"},{"location":"#modules","text":"Module Description argparse A module to parse arguments into a table dotenv A module to parse a .env file helper The root of all the modules logger A module to make logging with colors easier lua Allows lua to create and extend classes util A utility module for time, moderation, and permissions","title":"Modules"},{"location":"#classes","text":"Module Description Array An array with helper functions Template A template for creating embeds and more templates client The helper client, extends a Discordia client command A command helper class, should be extended embed A embed helper class emitter A embed helper class event An event class, should be extended help The default help, extends command luaCommand Makes creating commands with pure lua easier plugin A plugin that functions like a dpy cog, should be extended prompt A prompt helper class status A command for testing to check the status of your tests","title":"Classes"},{"location":"#topics","text":"Module Description 01-simple-bot.md 02-embed-events.md readme.md","title":"Topics"},{"location":"#examples","text":"Module Description advanced-arguments.moon command.moon embeds.moon event.moon plugin.moon","title":"Examples"},{"location":"classes/Array/","text":"Class Array An array with helper functions Methods Property Description Array\\new (...) Takes in a vararg to populate the table Array\\forEach (func) For every item in the array, call the function Array\\filter (func) Loop through each item and each item that satifies the function gets added to an array and gets returned Array\\find (func) The first item to satify a function gets returned Array\\map (func) Create a new array based off what the passed function evaluates the data to Array\\push (item) Add an item to the array Array\\slice ([start=1[, stop=#array[, step=1]]]) Slice an array with a start, stop, and step Array\\shift () Remove the first in an array Array\\pop (pos) Remove the last or an index piece of data from an array Metamethods Property Description Array__len () Length of the list Array__pairs () Loop over the list Methods Array\\new (...) Takes in a vararg to populate the table Parameters Type Optional Default Description ... \u274c none Array\\forEach (func) For every item in the array, call the function Parameters Type Optional Default Description func function \u274c none Array\\filter (func) Loop through each item and each item that satifies the function gets added to an array and gets returned Parameters Type Optional Default Description func function \u274c none Array\\find (func) The first item to satify a function gets returned Parameters Type Optional Default Description func function \u274c none Array\\map (func) Create a new array based off what the passed function evaluates the data to Parameters Type Optional Default Description func function \u274c none Array\\push (item) Add an item to the array Parameters Type Optional Default Description item \u274c none Array\\slice ([start=1[, stop=#array[, step=1]]]) Slice an array with a start, stop, and step Parameters Type Optional Default Description start number \u2611\ufe0f 1 Where to start the slice stop number \u2611\ufe0f #array Where to stop the slice step number \u2611\ufe0f 1 The amount to step buy Array\\shift () Remove the first in an array Array\\pop (pos) Remove the last or an index piece of data from an array Parameters Type Optional Default Description pos number \u274c none Where to take the data out of Metamethods Array__len () Length of the list Array__pairs () Loop over the list","title":"Array"},{"location":"classes/Array/#class-array","text":"An array with helper functions","title":"Class Array"},{"location":"classes/Array/#methods","text":"Property Description Array\\new (...) Takes in a vararg to populate the table Array\\forEach (func) For every item in the array, call the function Array\\filter (func) Loop through each item and each item that satifies the function gets added to an array and gets returned Array\\find (func) The first item to satify a function gets returned Array\\map (func) Create a new array based off what the passed function evaluates the data to Array\\push (item) Add an item to the array Array\\slice ([start=1[, stop=#array[, step=1]]]) Slice an array with a start, stop, and step Array\\shift () Remove the first in an array Array\\pop (pos) Remove the last or an index piece of data from an array","title":"Methods"},{"location":"classes/Array/#metamethods","text":"Property Description Array__len () Length of the list Array__pairs () Loop over the list","title":"Metamethods"},{"location":"classes/Array/#methods_1","text":"","title":"Methods"},{"location":"classes/Array/#arraynew","text":"Takes in a vararg to populate the table Parameters Type Optional Default Description ... \u274c none","title":"Array\\new (...)"},{"location":"classes/Array/#arrayforeach-func","text":"For every item in the array, call the function Parameters Type Optional Default Description func function \u274c none","title":"Array\\forEach (func)"},{"location":"classes/Array/#arrayfilter-func","text":"Loop through each item and each item that satifies the function gets added to an array and gets returned Parameters Type Optional Default Description func function \u274c none","title":"Array\\filter (func)"},{"location":"classes/Array/#arrayfind-func","text":"The first item to satify a function gets returned Parameters Type Optional Default Description func function \u274c none","title":"Array\\find (func)"},{"location":"classes/Array/#arraymap-func","text":"Create a new array based off what the passed function evaluates the data to Parameters Type Optional Default Description func function \u274c none","title":"Array\\map (func)"},{"location":"classes/Array/#arraypush-item","text":"Add an item to the array Parameters Type Optional Default Description item \u274c none","title":"Array\\push (item)"},{"location":"classes/Array/#arrayslice-start1-stoparray-step1","text":"Slice an array with a start, stop, and step Parameters Type Optional Default Description start number \u2611\ufe0f 1 Where to start the slice stop number \u2611\ufe0f #array Where to stop the slice step number \u2611\ufe0f 1 The amount to step buy","title":"Array\\slice ([start=1[, stop=#array[, step=1]]])"},{"location":"classes/Array/#arrayshift","text":"Remove the first in an array","title":"Array\\shift ()"},{"location":"classes/Array/#arraypop-pos","text":"Remove the last or an index piece of data from an array Parameters Type Optional Default Description pos number \u274c none Where to take the data out of","title":"Array\\pop (pos)"},{"location":"classes/Array/#metamethods_1","text":"","title":"Metamethods"},{"location":"classes/Array/#array__len","text":"Length of the list","title":"Array__len ()"},{"location":"classes/Array/#array__pairs","text":"Loop over the list","title":"Array__pairs ()"},{"location":"classes/Template/","text":"Class Template A template for creating embeds and more templates Methods Property Description Template\\new (start, useEtLua) Create a new template Template\\render (env) Render the template into an embed Template\\construct (env, useEtLua) Render the template into another template Methods Template\\new (start, useEtLua) Create a new template Parameters Type Optional Default Description start optional table \u274c none The starting point of the embed useEtLua optional boolean \u274c none To use etlua as the renderer, mustache is the default renderer Template\\render (env) Render the template into an embed Parameters Type Optional Default Description env optional table \u274c none The table to pass to the renderer Template\\construct (env, useEtLua) Render the template into another template Parameters Type Optional Default Description env optional table \u274c none The table to pass to the renderer useEtLua optional boolean \u274c none To use etlua as the renderer, mustache is the default renderer","title":"Template"},{"location":"classes/Template/#class-template","text":"A template for creating embeds and more templates","title":"Class Template"},{"location":"classes/Template/#methods","text":"Property Description Template\\new (start, useEtLua) Create a new template Template\\render (env) Render the template into an embed Template\\construct (env, useEtLua) Render the template into another template","title":"Methods"},{"location":"classes/Template/#methods_1","text":"","title":"Methods"},{"location":"classes/Template/#templatenew-start-useetlua","text":"Create a new template Parameters Type Optional Default Description start optional table \u274c none The starting point of the embed useEtLua optional boolean \u274c none To use etlua as the renderer, mustache is the default renderer","title":"Template\\new (start, useEtLua)"},{"location":"classes/Template/#templaterender-env","text":"Render the template into an embed Parameters Type Optional Default Description env optional table \u274c none The table to pass to the renderer","title":"Template\\render (env)"},{"location":"classes/Template/#templateconstruct-env-useetlua","text":"Render the template into another template Parameters Type Optional Default Description env optional table \u274c none The table to pass to the renderer useEtLua optional boolean \u274c none To use etlua as the renderer, mustache is the default renderer","title":"Template\\construct (env, useEtLua)"},{"location":"classes/client/","text":"Class client The helper client, extends a Discordia client Functions Property Description helper.__init (token[, config={}]) Create a new helper client helper.login (status) Login to Discord helper.resetErrors () Reset the errors back to an empty array helper.updateOwners (owners) Update the owners list helper.addCommand (command) Add a command helper.removeCommand (name, check) Remove a command helper.addEvent (event) Add an event helper.removeEvent (name, check) Remove an event helper.removePlugin (name) Remove plugin Tables Property Description client.config The clients configuration (Most from Discordia client) Functions helper.__init (token[, config={}]) Create a new helper client Parameters Type Optional Default Description token string \u274c none The Discord bot token config config \u2611\ufe0f {} The configuration of the client helper.login (status) Login to Discord Parameters Type Optional Default Description status table \u274c none helper.resetErrors () Reset the errors back to an empty array helper.updateOwners (owners) Update the owners list Parameters Type Optional Default Description owners table \u274c none helper.addCommand (command) Add a command Parameters Type Optional Default Description command command \u274c none See also: command helper.removeCommand (name, check) Remove a command Parameters Type Optional Default Description name string \u274c none check optional function \u274c none helper.addEvent (event) Add an event Parameters Type Optional Default Description event event \u274c none See also: event helper.removeEvent (name, check) Remove an event Parameters Type Optional Default Description name string \u274c none check optional function \u274c none helper.removePlugin (name) Remove plugin Parameters Type Optional Default Description name string \u274c none Tables client.config The clients configuration (Most from Discordia client) Fields Type Optional Default Description prefix string \u2611\ufe0f '!' The prefix the bot will use defaultHelp boolean \u2611\ufe0f true Whether to use the default help or not owners table \u2611\ufe0f {} The owners of this bot testing boolean \u2611\ufe0f false Weather the bot is in testing or not testbot boolean \u2611\ufe0f false Weather this current bot is a test bot botid string \u2611\ufe0f nil The bot testing this current bot storeErrors boolean \u2611\ufe0f false Weather to store error information within a table disableDefaultCH boolean \u2611\ufe0f false Weather to disable the default command handler (Usually for custom prefixes) routeDelay number \u2611\ufe0f 300 Minimum time in milliseconds to wait between HTTP requests per-route maxRetries number \u2611\ufe0f 5 The maximum number of retries to attempt after an HTTP request fails shardCount number \u2611\ufe0f 0 The total number of shards the application is using (0 signals to use the recommended count) firstShard number \u2611\ufe0f 0 The ID of the first shard to run on the client (0 is the minimum) lastShard number \u2611\ufe0f -1 The ID of the last shard to run on the client (-1 signals to use shardCount - 1) largeThreshold number \u2611\ufe0f 100 Limit to how many members are initially fetched per-guild on start-up cacheAllMembers boolean \u2611\ufe0f false Whether to cache all members (If false, offline members may not be cached) autoReconnect boolean \u2611\ufe0f true Whether to attempt to reconnect after an unexpected gateway disconnection compress boolean \u2611\ufe0f true Whether to allow for compressed gateway payloads bitrate number \u2611\ufe0f 64000 The default bitrate to use for voice connections, from 8000 to 128000 logFile string \u2611\ufe0f 'discordia.log' The file to use for logging logLevel string \u2611\ufe0f logLevel.info The level to use for logging (see Enumerations) dateTime string \u2611\ufe0f '%F %T' The date and time format to use logging syncGuilds boolean \u2611\ufe0f false Whether to automatically sync all guilds on start up (user-accounts only)","title":"Client"},{"location":"classes/client/#class-client","text":"The helper client, extends a Discordia client","title":"Class client"},{"location":"classes/client/#functions","text":"Property Description helper.__init (token[, config={}]) Create a new helper client helper.login (status) Login to Discord helper.resetErrors () Reset the errors back to an empty array helper.updateOwners (owners) Update the owners list helper.addCommand (command) Add a command helper.removeCommand (name, check) Remove a command helper.addEvent (event) Add an event helper.removeEvent (name, check) Remove an event helper.removePlugin (name) Remove plugin","title":"Functions"},{"location":"classes/client/#tables","text":"Property Description client.config The clients configuration (Most from Discordia client)","title":"Tables"},{"location":"classes/client/#functions_1","text":"","title":"Functions"},{"location":"classes/client/#helper__init-token-config","text":"Create a new helper client Parameters Type Optional Default Description token string \u274c none The Discord bot token config config \u2611\ufe0f {} The configuration of the client","title":"helper.__init (token[, config={}])"},{"location":"classes/client/#helperlogin-status","text":"Login to Discord Parameters Type Optional Default Description status table \u274c none","title":"helper.login (status)"},{"location":"classes/client/#helperreseterrors","text":"Reset the errors back to an empty array","title":"helper.resetErrors ()"},{"location":"classes/client/#helperupdateowners-owners","text":"Update the owners list Parameters Type Optional Default Description owners table \u274c none","title":"helper.updateOwners (owners)"},{"location":"classes/client/#helperaddcommand-command","text":"Add a command Parameters Type Optional Default Description command command \u274c none See also: command","title":"helper.addCommand (command)"},{"location":"classes/client/#helperremovecommand-name-check","text":"Remove a command Parameters Type Optional Default Description name string \u274c none check optional function \u274c none","title":"helper.removeCommand (name, check)"},{"location":"classes/client/#helperaddevent-event","text":"Add an event Parameters Type Optional Default Description event event \u274c none See also: event","title":"helper.addEvent (event)"},{"location":"classes/client/#helperremoveevent-name-check","text":"Remove an event Parameters Type Optional Default Description name string \u274c none check optional function \u274c none","title":"helper.removeEvent (name, check)"},{"location":"classes/client/#helperremoveplugin-name","text":"Remove plugin Parameters Type Optional Default Description name string \u274c none","title":"helper.removePlugin (name)"},{"location":"classes/client/#tables_1","text":"","title":"Tables"},{"location":"classes/client/#clientconfig","text":"The clients configuration (Most from Discordia client) Fields Type Optional Default Description prefix string \u2611\ufe0f '!' The prefix the bot will use defaultHelp boolean \u2611\ufe0f true Whether to use the default help or not owners table \u2611\ufe0f {} The owners of this bot testing boolean \u2611\ufe0f false Weather the bot is in testing or not testbot boolean \u2611\ufe0f false Weather this current bot is a test bot botid string \u2611\ufe0f nil The bot testing this current bot storeErrors boolean \u2611\ufe0f false Weather to store error information within a table disableDefaultCH boolean \u2611\ufe0f false Weather to disable the default command handler (Usually for custom prefixes) routeDelay number \u2611\ufe0f 300 Minimum time in milliseconds to wait between HTTP requests per-route maxRetries number \u2611\ufe0f 5 The maximum number of retries to attempt after an HTTP request fails shardCount number \u2611\ufe0f 0 The total number of shards the application is using (0 signals to use the recommended count) firstShard number \u2611\ufe0f 0 The ID of the first shard to run on the client (0 is the minimum) lastShard number \u2611\ufe0f -1 The ID of the last shard to run on the client (-1 signals to use shardCount - 1) largeThreshold number \u2611\ufe0f 100 Limit to how many members are initially fetched per-guild on start-up cacheAllMembers boolean \u2611\ufe0f false Whether to cache all members (If false, offline members may not be cached) autoReconnect boolean \u2611\ufe0f true Whether to attempt to reconnect after an unexpected gateway disconnection compress boolean \u2611\ufe0f true Whether to allow for compressed gateway payloads bitrate number \u2611\ufe0f 64000 The default bitrate to use for voice connections, from 8000 to 128000 logFile string \u2611\ufe0f 'discordia.log' The file to use for logging logLevel string \u2611\ufe0f logLevel.info The level to use for logging (see Enumerations) dateTime string \u2611\ufe0f '%F %T' The date and time format to use logging syncGuilds boolean \u2611\ufe0f false Whether to automatically sync all guilds on start up (user-accounts only)","title":"client.config"},{"location":"classes/command/","text":"Class command A command helper class, should be extended Methods Property Description command\\new () Create a command command\\help (channel) An function to generate a help embed and send to to a channel command\\pre () An internal function to fill in all the data command\\check (command, msg, client) An internal function to check if the message fits the command command\\addMiddleware (middleware) A function that can be used to add extra functionality to commands like more advanced argument parsing command\\run (msg, args, client) An internal function to run the command, it will check against preconditions if it exists Methods command\\new () Create a command command\\help (channel) An function to generate a help embed and send to to a channel Parameters Type Optional Default Description channel table \u274c none The channel to send the message to command\\pre () An internal function to fill in all the data command\\check (command, msg, client) An internal function to check if the message fits the command Parameters Type Optional Default Description command string \u274c none The command without arguments or prefix msg table \u274c none The message that called the command client client \u274c none The client using the command command\\addMiddleware (middleware) A function that can be used to add extra functionality to commands like more advanced argument parsing Parameters Type Optional Default Description middleware middleware \u274c none The middleware to add, should have execute function command\\run (msg, args, client) An internal function to run the command, it will check against preconditions if it exists Parameters Type Optional Default Description msg table \u274c none The message that called the command args string[] \u274c none The arguments of the message client client \u274c none The client that called the command","title":"Command"},{"location":"classes/command/#class-command","text":"A command helper class, should be extended","title":"Class command"},{"location":"classes/command/#methods","text":"Property Description command\\new () Create a command command\\help (channel) An function to generate a help embed and send to to a channel command\\pre () An internal function to fill in all the data command\\check (command, msg, client) An internal function to check if the message fits the command command\\addMiddleware (middleware) A function that can be used to add extra functionality to commands like more advanced argument parsing command\\run (msg, args, client) An internal function to run the command, it will check against preconditions if it exists","title":"Methods"},{"location":"classes/command/#methods_1","text":"","title":"Methods"},{"location":"classes/command/#commandnew","text":"Create a command","title":"command\\new ()"},{"location":"classes/command/#commandhelp-channel","text":"An function to generate a help embed and send to to a channel Parameters Type Optional Default Description channel table \u274c none The channel to send the message to","title":"command\\help (channel)"},{"location":"classes/command/#commandpre","text":"An internal function to fill in all the data","title":"command\\pre ()"},{"location":"classes/command/#commandcheck-command-msg-client","text":"An internal function to check if the message fits the command Parameters Type Optional Default Description command string \u274c none The command without arguments or prefix msg table \u274c none The message that called the command client client \u274c none The client using the command","title":"command\\check (command, msg, client)"},{"location":"classes/command/#commandaddmiddleware-middleware","text":"A function that can be used to add extra functionality to commands like more advanced argument parsing Parameters Type Optional Default Description middleware middleware \u274c none The middleware to add, should have execute function","title":"command\\addMiddleware (middleware)"},{"location":"classes/command/#commandrun-msg-args-client","text":"An internal function to run the command, it will check against preconditions if it exists Parameters Type Optional Default Description msg table \u274c none The message that called the command args string[] \u274c none The arguments of the message client client \u274c none The client that called the command","title":"command\\run (msg, args, client)"},{"location":"classes/embed/","text":"Class embed A embed helper class Tables Property Description embed.field An embed field Methods Property Description embed\\addField (name, value[, inline=false]) Add a field to the embed with name, value, and inline embed\\addFields (fields) Add fields to the embed embed\\setAuthor (name, iconURL, url) Set the author of the embed embed\\setColor (color) Set the color of the embed embed\\setDescription (description) Set the description of the embed embed\\setFooter (text, iconURL) Set the footer of the embed embed\\setImage (url) Set the image of the embed embed\\setThumbnail (url) Set the thumbnail of the embed embed\\setTimestamp ([timestamp=Date!.toISO!]) Set the timestamp of the embed, defaults to right now embed\\setTitle (title) Set the title of the embed embed\\setURL (url) Set the url of the embed embed\\toJSON () Returns the embed object without any metatables embed\\send (channel) Sends the embed and checks if we have permissions to Tables embed.field An embed field Fields Type Optional Default Description name string \u274c none The name of the field value string \u274c none The value of the field inline boolean \u2611\ufe0f false If the field is inline Methods embed\\addField (name, value[, inline=false]) Add a field to the embed with name, value, and inline Parameters Type Optional Default Description name field or string \u274c none The name of the field or an embed object value optional string \u274c none The value of the field, optional if name is field inline boolean \u2611\ufe0f false If the field is inline Returns: embed embed\\addFields (fields) Add fields to the embed Parameters Type Optional Default Description fields {field,...} or {name,value,inline}... \u274c none The fields to add, max 25 Returns: embed embed\\setAuthor (name, iconURL, url) Set the author of the embed Parameters Type Optional Default Description name string \u274c none The author name iconURL optional string \u274c none The icon of the author url optional string \u274c none The url of the author Returns: embed embed\\setColor (color) Set the color of the embed Parameters Type Optional Default Description color hex \u274c none The color in hex eg 0xFFFFFF Returns: embed embed\\setDescription (description) Set the description of the embed Parameters Type Optional Default Description description string \u274c none The description of the embed Returns: embed embed\\setFooter (text, iconURL) Set the footer of the embed Parameters Type Optional Default Description text string \u274c none The footer text iconURL optional string \u274c none The icon of the footer Returns: embed embed\\setImage (url) Set the image of the embed Parameters Type Optional Default Description url string \u274c none The image url of the embed Returns: embed embed\\setThumbnail (url) Set the thumbnail of the embed Parameters Type Optional Default Description url string \u274c none The thumbnail url of the embed Returns: embed embed\\setTimestamp ([timestamp=Date!.toISO!]) Set the timestamp of the embed, defaults to right now Parameters Type Optional Default Description timestamp string \u2611\ufe0f Date!.toISO! The timestamp in ISO 8601 Returns: embed embed\\setTitle (title) Set the title of the embed Parameters Type Optional Default Description title string \u274c none The title of the embed Returns: embed embed\\setURL (url) Set the url of the embed Parameters Type Optional Default Description url string \u274c none The url of the embed Returns: embed embed\\toJSON () Returns the embed object without any metatables Returns: table embed\\send (channel) Sends the embed and checks if we have permissions to Parameters Type Optional Default Description channel table \u274c none The channel to send the embed into","title":"Embed"},{"location":"classes/embed/#class-embed","text":"A embed helper class","title":"Class embed"},{"location":"classes/embed/#tables","text":"Property Description embed.field An embed field","title":"Tables"},{"location":"classes/embed/#methods","text":"Property Description embed\\addField (name, value[, inline=false]) Add a field to the embed with name, value, and inline embed\\addFields (fields) Add fields to the embed embed\\setAuthor (name, iconURL, url) Set the author of the embed embed\\setColor (color) Set the color of the embed embed\\setDescription (description) Set the description of the embed embed\\setFooter (text, iconURL) Set the footer of the embed embed\\setImage (url) Set the image of the embed embed\\setThumbnail (url) Set the thumbnail of the embed embed\\setTimestamp ([timestamp=Date!.toISO!]) Set the timestamp of the embed, defaults to right now embed\\setTitle (title) Set the title of the embed embed\\setURL (url) Set the url of the embed embed\\toJSON () Returns the embed object without any metatables embed\\send (channel) Sends the embed and checks if we have permissions to","title":"Methods"},{"location":"classes/embed/#tables_1","text":"","title":"Tables"},{"location":"classes/embed/#embedfield","text":"An embed field Fields Type Optional Default Description name string \u274c none The name of the field value string \u274c none The value of the field inline boolean \u2611\ufe0f false If the field is inline","title":"embed.field"},{"location":"classes/embed/#methods_1","text":"","title":"Methods"},{"location":"classes/embed/#embedaddfield-name-value-inlinefalse","text":"Add a field to the embed with name, value, and inline Parameters Type Optional Default Description name field or string \u274c none The name of the field or an embed object value optional string \u274c none The value of the field, optional if name is field inline boolean \u2611\ufe0f false If the field is inline Returns: embed","title":"embed\\addField (name, value[, inline=false])"},{"location":"classes/embed/#embedaddfields-fields","text":"Add fields to the embed Parameters Type Optional Default Description fields {field,...} or {name,value,inline}... \u274c none The fields to add, max 25 Returns: embed","title":"embed\\addFields (fields)"},{"location":"classes/embed/#embedsetauthor-name-iconurl-url","text":"Set the author of the embed Parameters Type Optional Default Description name string \u274c none The author name iconURL optional string \u274c none The icon of the author url optional string \u274c none The url of the author Returns: embed","title":"embed\\setAuthor (name, iconURL, url)"},{"location":"classes/embed/#embedsetcolor-color","text":"Set the color of the embed Parameters Type Optional Default Description color hex \u274c none The color in hex eg 0xFFFFFF Returns: embed","title":"embed\\setColor (color)"},{"location":"classes/embed/#embedsetdescription-description","text":"Set the description of the embed Parameters Type Optional Default Description description string \u274c none The description of the embed Returns: embed","title":"embed\\setDescription (description)"},{"location":"classes/embed/#embedsetfooter-text-iconurl","text":"Set the footer of the embed Parameters Type Optional Default Description text string \u274c none The footer text iconURL optional string \u274c none The icon of the footer Returns: embed","title":"embed\\setFooter (text, iconURL)"},{"location":"classes/embed/#embedsetimage-url","text":"Set the image of the embed Parameters Type Optional Default Description url string \u274c none The image url of the embed Returns: embed","title":"embed\\setImage (url)"},{"location":"classes/embed/#embedsetthumbnail-url","text":"Set the thumbnail of the embed Parameters Type Optional Default Description url string \u274c none The thumbnail url of the embed Returns: embed","title":"embed\\setThumbnail (url)"},{"location":"classes/embed/#embedsettimestamp-timestampdatetoiso","text":"Set the timestamp of the embed, defaults to right now Parameters Type Optional Default Description timestamp string \u2611\ufe0f Date!.toISO! The timestamp in ISO 8601 Returns: embed","title":"embed\\setTimestamp ([timestamp=Date!.toISO!])"},{"location":"classes/embed/#embedsettitle-title","text":"Set the title of the embed Parameters Type Optional Default Description title string \u274c none The title of the embed Returns: embed","title":"embed\\setTitle (title)"},{"location":"classes/embed/#embedseturl-url","text":"Set the url of the embed Parameters Type Optional Default Description url string \u274c none The url of the embed Returns: embed","title":"embed\\setURL (url)"},{"location":"classes/embed/#embedtojson","text":"Returns the embed object without any metatables Returns: table","title":"embed\\toJSON ()"},{"location":"classes/embed/#embedsend-channel","text":"Sends the embed and checks if we have permissions to Parameters Type Optional Default Description channel table \u274c none The channel to send the embed into","title":"embed\\send (channel)"},{"location":"classes/emitter/","text":"Class emitter A embed helper class Methods Property Description emitter\\new () Create a new emitter emitter\\on (name, fn) Listen to the emitter emitter\\once (name, fn) Listen to the emitter once emitter\\emit (name, data) Emit an event emitter\\removeListener (name, fn) Remove a listener from an event emitter\\waitFor (name, timeout, predicate) Wait for an event to be fired in a certain timeframe matching an optional predicate Methods emitter\\new () Create a new emitter emitter\\on (name, fn) Listen to the emitter Parameters Type Optional Default Description name string \u274c none The name of the event fn function \u274c none The callback function emitter\\once (name, fn) Listen to the emitter once Parameters Type Optional Default Description name string \u274c none The name of the event fn function \u274c none The callback function emitter\\emit (name, data) Emit an event Parameters Type Optional Default Description name string \u274c none The name of the event data optional {any,...} \u274c none The data to emit emitter\\removeListener (name, fn) Remove a listener from an event Parameters Type Optional Default Description name string \u274c none The name of the event fn function \u274c none The callback function emitter\\waitFor (name, timeout, predicate) Wait for an event to be fired in a certain timeframe matching an optional predicate Parameters Type Optional Default Description name string \u274c none The name of the event timeout optional number \u274c none The amount of time to wait before timing out predicate optional function \u274c none The function that has to return true in order to return a value","title":"Emitter"},{"location":"classes/emitter/#class-emitter","text":"A embed helper class","title":"Class emitter"},{"location":"classes/emitter/#methods","text":"Property Description emitter\\new () Create a new emitter emitter\\on (name, fn) Listen to the emitter emitter\\once (name, fn) Listen to the emitter once emitter\\emit (name, data) Emit an event emitter\\removeListener (name, fn) Remove a listener from an event emitter\\waitFor (name, timeout, predicate) Wait for an event to be fired in a certain timeframe matching an optional predicate","title":"Methods"},{"location":"classes/emitter/#methods_1","text":"","title":"Methods"},{"location":"classes/emitter/#emitternew","text":"Create a new emitter","title":"emitter\\new ()"},{"location":"classes/emitter/#emitteron-name-fn","text":"Listen to the emitter Parameters Type Optional Default Description name string \u274c none The name of the event fn function \u274c none The callback function","title":"emitter\\on (name, fn)"},{"location":"classes/emitter/#emitteronce-name-fn","text":"Listen to the emitter once Parameters Type Optional Default Description name string \u274c none The name of the event fn function \u274c none The callback function","title":"emitter\\once (name, fn)"},{"location":"classes/emitter/#emitteremit-name-data","text":"Emit an event Parameters Type Optional Default Description name string \u274c none The name of the event data optional {any,...} \u274c none The data to emit","title":"emitter\\emit (name, data)"},{"location":"classes/emitter/#emitterremovelistener-name-fn","text":"Remove a listener from an event Parameters Type Optional Default Description name string \u274c none The name of the event fn function \u274c none The callback function","title":"emitter\\removeListener (name, fn)"},{"location":"classes/emitter/#emitterwaitfor-name-timeout-predicate","text":"Wait for an event to be fired in a certain timeframe matching an optional predicate Parameters Type Optional Default Description name string \u274c none The name of the event timeout optional number \u274c none The amount of time to wait before timing out predicate optional function \u274c none The function that has to return true in order to return a value","title":"emitter\\waitFor (name, timeout, predicate)"},{"location":"classes/event/","text":"Class event An event class, should be extended Methods Property Description event\\use (client) Use the event, takes in a client object Methods event\\use (client) Use the event, takes in a client object Parameters Type Optional Default Description client client \u274c none The client your going to listen on","title":"Event"},{"location":"classes/event/#class-event","text":"An event class, should be extended","title":"Class event"},{"location":"classes/event/#methods","text":"Property Description event\\use (client) Use the event, takes in a client object","title":"Methods"},{"location":"classes/event/#methods_1","text":"","title":"Methods"},{"location":"classes/event/#eventuse-client","text":"Use the event, takes in a client object Parameters Type Optional Default Description client client \u274c none The client your going to listen on","title":"event\\use (client)"},{"location":"classes/help/","text":"Class help The default help, extends command Methods Property Description help\\new () Sets the usage, example, and description of the command help\\all (msg, _, client) Returns a list of all the commands help\\execute (msg, args, client) Search for the command giving if one was given Methods help\\new () Sets the usage, example, and description of the command help\\all (msg, _, client) Returns a list of all the commands Parameters Type Optional Default Description msg \u274c none _ \u274c none client \u274c none help\\execute (msg, args, client) Search for the command giving if one was given Parameters Type Optional Default Description msg \u274c none args \u274c none client \u274c none","title":"Help"},{"location":"classes/help/#class-help","text":"The default help, extends command","title":"Class help"},{"location":"classes/help/#methods","text":"Property Description help\\new () Sets the usage, example, and description of the command help\\all (msg, _, client) Returns a list of all the commands help\\execute (msg, args, client) Search for the command giving if one was given","title":"Methods"},{"location":"classes/help/#methods_1","text":"","title":"Methods"},{"location":"classes/help/#helpnew","text":"Sets the usage, example, and description of the command","title":"help\\new ()"},{"location":"classes/help/#helpall-msg-_-client","text":"Returns a list of all the commands Parameters Type Optional Default Description msg \u274c none _ \u274c none client \u274c none","title":"help\\all (msg, _, client)"},{"location":"classes/help/#helpexecute-msg-args-client","text":"Search for the command giving if one was given Parameters Type Optional Default Description msg \u274c none args \u274c none client \u274c none","title":"help\\execute (msg, args, client)"},{"location":"classes/luaCommand/","text":"Class luaCommand Makes creating commands with pure lua easier Methods Property Description luaCommand\\new (name) Takes in the name of the command luaCommand\\make () Makes the command, remember that you should set the properties Methods luaCommand\\new (name) Takes in the name of the command Parameters Type Optional Default Description name string \u274c none Command name luaCommand\\make () Makes the command, remember that you should set the properties","title":"LuaCommand"},{"location":"classes/luaCommand/#class-luacommand","text":"Makes creating commands with pure lua easier","title":"Class luaCommand"},{"location":"classes/luaCommand/#methods","text":"Property Description luaCommand\\new (name) Takes in the name of the command luaCommand\\make () Makes the command, remember that you should set the properties","title":"Methods"},{"location":"classes/luaCommand/#methods_1","text":"","title":"Methods"},{"location":"classes/luaCommand/#luacommandnew-name","text":"Takes in the name of the command Parameters Type Optional Default Description name string \u274c none Command name","title":"luaCommand\\new (name)"},{"location":"classes/luaCommand/#luacommandmake","text":"Makes the command, remember that you should set the properties","title":"luaCommand\\make ()"},{"location":"classes/plugin/","text":"Class plugin A plugin that functions like a dpy cog, should be extended Methods Property Description plugin\\new () Create a new plugin, sets 2 properties, @command and @event. plugin\\use (client) Allows the plugin to be used by the client Methods plugin\\new () Create a new plugin, sets 2 properties, @command and @event. These should be used inplace of command and event plugin\\use (client) Allows the plugin to be used by the client Parameters Type Optional Default Description client client \u274c none The client to use the plugin on","title":"Plugin"},{"location":"classes/plugin/#class-plugin","text":"A plugin that functions like a dpy cog, should be extended","title":"Class plugin"},{"location":"classes/plugin/#methods","text":"Property Description plugin\\new () Create a new plugin, sets 2 properties, @command and @event. plugin\\use (client) Allows the plugin to be used by the client","title":"Methods"},{"location":"classes/plugin/#methods_1","text":"","title":"Methods"},{"location":"classes/plugin/#pluginnew","text":"Create a new plugin, sets 2 properties, @command and @event. These should be used inplace of command and event","title":"plugin\\new ()"},{"location":"classes/plugin/#pluginuse-client","text":"Allows the plugin to be used by the client Parameters Type Optional Default Description client client \u274c none The client to use the plugin on","title":"plugin\\use (client)"},{"location":"classes/prompt/","text":"Class prompt A prompt helper class Tables Property Description prompt.globalActions Prompt global actions prompt.config Prompt configuration prompt.task A prompt task Methods Property Description prompt\\new (msg, client, config) Construct a prompt to get user information prompt\\next () Move on the prompt prompt\\back () Go back on the prompt prompt\\redo () Redo the current prompt task prompt\\close () Close the prompt prompt\\reply (content) Send a message in the prompt channel prompt\\save (key, value) Save a value into the prompt prompt\\get (key) Get a value from the prompt prompt\\handle (msg) Internal; Handle the action prompt\\update () Internal; Handle the message Tables prompt.globalActions Prompt global actions Fields Type Optional Default Description check \u274c none A function that prompts the user to check their input data, to make data private prefix it with an underscore prompt.config Prompt configuration Fields Type Optional Default Description embed boolean \u274c none tasks task[] \u274c none prompt.task A prompt task Fields Type Optional Default Description message string or table \u274c none The message of the task, if the embed flag is set, message has to be embed action string or function \u274c none If its a string, it has to be in global actions. Calls function with message content, prompt, and message object Methods prompt\\new (msg, client, config) Construct a prompt to get user information Parameters Type Optional Default Description msg \u274c none The message client \u274c none A Discordia or Comrade client config config \u274c none A config containing the tasks, timeout, and if its an embed prompt\\next () Move on the prompt prompt\\back () Go back on the prompt prompt\\redo () Redo the current prompt task prompt\\close () Close the prompt prompt\\reply (content) Send a message in the prompt channel Parameters Type Optional Default Description content \u274c none prompt\\save (key, value) Save a value into the prompt Parameters Type Optional Default Description key \u274c none value \u274c none prompt\\get (key) Get a value from the prompt Parameters Type Optional Default Description key \u274c none prompt\\handle (msg) Internal; Handle the action Parameters Type Optional Default Description msg \u274c none prompt\\update () Internal; Handle the message","title":"Prompt"},{"location":"classes/prompt/#class-prompt","text":"A prompt helper class","title":"Class prompt"},{"location":"classes/prompt/#tables","text":"Property Description prompt.globalActions Prompt global actions prompt.config Prompt configuration prompt.task A prompt task","title":"Tables"},{"location":"classes/prompt/#methods","text":"Property Description prompt\\new (msg, client, config) Construct a prompt to get user information prompt\\next () Move on the prompt prompt\\back () Go back on the prompt prompt\\redo () Redo the current prompt task prompt\\close () Close the prompt prompt\\reply (content) Send a message in the prompt channel prompt\\save (key, value) Save a value into the prompt prompt\\get (key) Get a value from the prompt prompt\\handle (msg) Internal; Handle the action prompt\\update () Internal; Handle the message","title":"Methods"},{"location":"classes/prompt/#tables_1","text":"","title":"Tables"},{"location":"classes/prompt/#promptglobalactions","text":"Prompt global actions Fields Type Optional Default Description check \u274c none A function that prompts the user to check their input data, to make data private prefix it with an underscore","title":"prompt.globalActions"},{"location":"classes/prompt/#promptconfig","text":"Prompt configuration Fields Type Optional Default Description embed boolean \u274c none tasks task[] \u274c none","title":"prompt.config"},{"location":"classes/prompt/#prompttask","text":"A prompt task Fields Type Optional Default Description message string or table \u274c none The message of the task, if the embed flag is set, message has to be embed action string or function \u274c none If its a string, it has to be in global actions. Calls function with message content, prompt, and message object","title":"prompt.task"},{"location":"classes/prompt/#methods_1","text":"","title":"Methods"},{"location":"classes/prompt/#promptnew-msg-client-config","text":"Construct a prompt to get user information Parameters Type Optional Default Description msg \u274c none The message client \u274c none A Discordia or Comrade client config config \u274c none A config containing the tasks, timeout, and if its an embed","title":"prompt\\new (msg, client, config)"},{"location":"classes/prompt/#promptnext","text":"Move on the prompt","title":"prompt\\next ()"},{"location":"classes/prompt/#promptback","text":"Go back on the prompt","title":"prompt\\back ()"},{"location":"classes/prompt/#promptredo","text":"Redo the current prompt task","title":"prompt\\redo ()"},{"location":"classes/prompt/#promptclose","text":"Close the prompt","title":"prompt\\close ()"},{"location":"classes/prompt/#promptreply-content","text":"Send a message in the prompt channel Parameters Type Optional Default Description content \u274c none","title":"prompt\\reply (content)"},{"location":"classes/prompt/#promptsave-key-value","text":"Save a value into the prompt Parameters Type Optional Default Description key \u274c none value \u274c none","title":"prompt\\save (key, value)"},{"location":"classes/prompt/#promptget-key","text":"Get a value from the prompt Parameters Type Optional Default Description key \u274c none","title":"prompt\\get (key)"},{"location":"classes/prompt/#prompthandle-msg","text":"Internal; Handle the action Parameters Type Optional Default Description msg \u274c none","title":"prompt\\handle (msg)"},{"location":"classes/prompt/#promptupdate","text":"Internal; Handle the message","title":"prompt\\update ()"},{"location":"classes/status/","text":"Class status A command for testing to check the status of your tests Methods Property Description status\\new () Sets the usage, example, and description of the command status\\execute (msg, _, client) Get all status informaton Methods status\\new () Sets the usage, example, and description of the command status\\execute (msg, _, client) Get all status informaton Parameters Type Optional Default Description msg \u274c none _ \u274c none client \u274c none","title":"Status"},{"location":"classes/status/#class-status","text":"A command for testing to check the status of your tests","title":"Class status"},{"location":"classes/status/#methods","text":"Property Description status\\new () Sets the usage, example, and description of the command status\\execute (msg, _, client) Get all status informaton","title":"Methods"},{"location":"classes/status/#methods_1","text":"","title":"Methods"},{"location":"classes/status/#statusnew","text":"Sets the usage, example, and description of the command","title":"status\\new ()"},{"location":"classes/status/#statusexecute-msg-_-client","text":"Get all status informaton Parameters Type Optional Default Description msg \u274c none _ \u274c none client \u274c none","title":"status\\execute (msg, _, client)"},{"location":"examples/advanced-arguments.moon/","text":"advanced-arguments.moon import Command, ArgParse from require '../init' class test extends Command new: => super! @addMiddleware ArgParse { -- No changes needed to pre-existing commands { id: 'numOne' type : 'int' }, { id: 'numTwo' type : 'int' default: 0 }, { id: 'member' type : 'member' default: (msg) -> msg.member } }, @ execute: (msg, args) => -- Parses args into a table sum = args.numOne + args.numTwo msg\\reply \"The sum is #{sum} and the member is #{args.member.user.tag}!\"","title":"Advanced arguments.moon"},{"location":"examples/command.moon/","text":"command.moon import Command from require 'comrade' class commandname extends Command new: => super! @name = '' -- Override class name @aliases = { '' } @permissions = { '' } -- Uses overrides like if they have Moderation we can override them not having kick members @hidden = false -- It won't appear in help and can only be ran by an owner @allowDMS = false @cooldown = 3000 -- Comes in with a built in MS parser so it can say '3 minutes remaining' or '3 hours' @description = '' @usage = '' @example = '' subcommand: (msg, args, client) => -- I only run when you say commandname subcommand msg\\reply 'Subcommand!' execute: (msg, args, client) => -- Command logic @help msg.channel -- Send the help message commandname!","title":"Command.moon"},{"location":"examples/embeds.moon/","text":"embeds.moon import Template, Embed from require 'comrade' -- Normal embeds -- embed = Embed { title: 'You just got level 0' description: 'You just got level 0! You now have 5 coins!' } embed\\send 'channel' embed = Embed!\\setTitle( 'You just got level 0' )\\setDescription 'You just got level 0! You now have 5 coins!' -- Other method embed\\send 'channel' -- Templates -- -- Under the hood they use handlebars to handle the rendering level = Template { -- They extend embeds meaning that they allow for starting points title: '{{user}} just got to level {{level}}' description: '{{user}} got to level {{level}}! You now have {{coins}} coins!' } level\\render { user: '4 times 1 is even less than 0#3870' , level: 5 , coins: '2' } -- Since they use handlebars leaderboard = Template { title: \"{{guild}}'s leaderboard'\" description: ' {{#members}} {{name}} - {{level}} {{/members}} ' } leaderboard\\render { members: { {name: 'Github Issues' , level: 100 } {name: '4 times 1 is even less than 0' , level: 5 } } }","title":"Embeds.moon"},{"location":"examples/event.moon/","text":"event.moon import Event from require 'comrade' class messageCreate extends Event -- Class name should be the event name execute: (msg) => -- No need for super, arguments are the event arguments p msg messageCreate!","title":"Event.moon"},{"location":"examples/plugin.moon/","text":"plugin.moon import plugin from require 'comrade' class pluginname extends plugin new: => super! class commandname extends @command -- Plugins hold a command method which automatically registers itself to the plugin new: => super! @name = '' -- Override class name @aliases = { '' } @permissions = { '' } -- Uses overrides like if they have Moderation we can override them not having kick members @hidden = false -- It won't appear in help and can only be ran by an owner @allowDMS = false @cooldown = 3000 -- Comes in with a built in MS parser so it can say '3 minutes remaining' or '3 hours' @description = '' @usage = '' @example = '' subcommand: (msg, args, client) => -- I only run when you say commandname subcommand msg\\reply 'Subcommand!' execute: (msg, args, client) => -- Command logic @help msg.channel -- Send the help message class messageCreate extends @event -- They also hold an event, class name should be the event name execute: (msg) => -- No need for super, arguments are the event arguments p msg return pluginname!","title":"Plugin.moon"},{"location":"modules/argparse/","text":"Module argparse A module to parse arguments into a table See also advanced-arguments.moon Functions Property Description new (tbl, command) Construct an argument parser Tables Property Description argument An argument Fields Property Description int The built in types; They are automatically type casted to what they are named Functions new (tbl, command) Construct an argument parser Parameters Type Optional Default Description tbl argument[] \u274c none The argument table to parse command command \u274c none The command which you are using this on Tables argument An argument Fields Type Optional Default Description id string \u274c none The key of where to put the argument type string \u274c none The type of the argument default string or function \u2611\ufe0f nil The default argument, if passed a function it will be passed the argument and message Fields int The built in types; They are automatically type casted to what they are named Property Type Optional Default Description int \u274c none Check if the input is a number string \u274c none Does nothing as all inputs are strings boolean \u274c none Check if the input is true or false ban \u274c none Check if the input is a valid ban channel \u274c none Check if the input is a channel; does not allow searching emoji \u274c none Check if the input is a emoji guild \u274c none Check if the input is a guild, will preform a search if the input is a string invite \u274c none Check if the input is a invite code member \u274c none Check if the input is a member; does not allow searching message \u274c none Check if the input is message jump link or an id role \u274c none Check if the input is a role, will preform a search if the input is a string textchannel \u274c none Check if the input is a text channel, will preform a search if the input is a string","title":"argparse"},{"location":"modules/argparse/#module-argparse","text":"A module to parse arguments into a table","title":"Module argparse"},{"location":"modules/argparse/#see-also","text":"advanced-arguments.moon","title":"See also"},{"location":"modules/argparse/#functions","text":"Property Description new (tbl, command) Construct an argument parser","title":"Functions"},{"location":"modules/argparse/#tables","text":"Property Description argument An argument","title":"Tables"},{"location":"modules/argparse/#fields","text":"Property Description int The built in types; They are automatically type casted to what they are named","title":"Fields"},{"location":"modules/argparse/#functions_1","text":"","title":"Functions"},{"location":"modules/argparse/#new-tbl-command","text":"Construct an argument parser Parameters Type Optional Default Description tbl argument[] \u274c none The argument table to parse command command \u274c none The command which you are using this on","title":"new (tbl, command)"},{"location":"modules/argparse/#tables_1","text":"","title":"Tables"},{"location":"modules/argparse/#argument","text":"An argument Fields Type Optional Default Description id string \u274c none The key of where to put the argument type string \u274c none The type of the argument default string or function \u2611\ufe0f nil The default argument, if passed a function it will be passed the argument and message","title":"argument"},{"location":"modules/argparse/#fields_1","text":"","title":"Fields"},{"location":"modules/argparse/#int","text":"The built in types; They are automatically type casted to what they are named Property Type Optional Default Description int \u274c none Check if the input is a number string \u274c none Does nothing as all inputs are strings boolean \u274c none Check if the input is true or false ban \u274c none Check if the input is a valid ban channel \u274c none Check if the input is a channel; does not allow searching emoji \u274c none Check if the input is a emoji guild \u274c none Check if the input is a guild, will preform a search if the input is a string invite \u274c none Check if the input is a invite code member \u274c none Check if the input is a member; does not allow searching message \u274c none Check if the input is message jump link or an id role \u274c none Check if the input is a role, will preform a search if the input is a string textchannel \u274c none Check if the input is a text channel, will preform a search if the input is a string","title":"int"},{"location":"modules/dotenv/","text":"Module dotenv A module to parse a .env file Functions Property Description parse (src, options) Parses a .env file, does't support everything yet config (options) Automatically read, parse, and inject a .env file Functions parse (src, options) Parses a .env file, does't support everything yet Parameters Type Optional Default Description src string \u274c none The contents of the .env file options table \u274c none Contains if it is debug mode or not Returns: table The parsed .env fi config (options) Automatically read, parse, and inject a .env file Parameters Type Optional Default Description options table \u274c none The options on how to parse the file Returns: table The parsed .env fi","title":"dotenv"},{"location":"modules/dotenv/#module-dotenv","text":"A module to parse a .env file","title":"Module dotenv"},{"location":"modules/dotenv/#functions","text":"Property Description parse (src, options) Parses a .env file, does't support everything yet config (options) Automatically read, parse, and inject a .env file","title":"Functions"},{"location":"modules/dotenv/#functions_1","text":"","title":"Functions"},{"location":"modules/dotenv/#parse-src-options","text":"Parses a .env file, does't support everything yet Parameters Type Optional Default Description src string \u274c none The contents of the .env file options table \u274c none Contains if it is debug mode or not Returns: table The parsed .env fi","title":"parse (src, options)"},{"location":"modules/dotenv/#config-options","text":"Automatically read, parse, and inject a .env file Parameters Type Optional Default Description options table \u274c none The options on how to parse the file Returns: table The parsed .env fi","title":"config (options)"},{"location":"modules/helper/","text":"Module helper The root of all the modules Functions Property Description version () The version Array () Client () Command () Embed () Event () Help () LuaCommand () Plugin () Template () Emitter () Status () logger () prompt () util () dotenv () extensions () color () tabular () color lua () Functions version () The version Array () See also: Array Client () See also: Client Command () See also: Command Embed () See also: Embed Event () See also: Event Help () See also: Help LuaCommand () See also: LuaCommand Plugin () See also: Plugin Template () See also: Template Emitter () See also: Emitter Status () See also: Status logger () See also: logger prompt () See also: prompt util () See also: util dotenv () See also: dotenv extensions () See also: extensions color () See also: color tabular () color lua () See also: lua","title":"Root"},{"location":"modules/helper/#module-helper","text":"The root of all the modules","title":"Module helper"},{"location":"modules/helper/#functions","text":"Property Description version () The version Array () Client () Command () Embed () Event () Help () LuaCommand () Plugin () Template () Emitter () Status () logger () prompt () util () dotenv () extensions () color () tabular () color lua ()","title":"Functions"},{"location":"modules/helper/#functions_1","text":"","title":"Functions"},{"location":"modules/helper/#version","text":"The version","title":"version ()"},{"location":"modules/helper/#array","text":"See also: Array","title":"Array ()"},{"location":"modules/helper/#client","text":"See also: Client","title":"Client ()"},{"location":"modules/helper/#command","text":"See also: Command","title":"Command ()"},{"location":"modules/helper/#embed","text":"See also: Embed","title":"Embed ()"},{"location":"modules/helper/#event","text":"See also: Event","title":"Event ()"},{"location":"modules/helper/#help","text":"See also: Help","title":"Help ()"},{"location":"modules/helper/#luacommand","text":"See also: LuaCommand","title":"LuaCommand ()"},{"location":"modules/helper/#plugin","text":"See also: Plugin","title":"Plugin ()"},{"location":"modules/helper/#template","text":"See also: Template","title":"Template ()"},{"location":"modules/helper/#emitter","text":"See also: Emitter","title":"Emitter ()"},{"location":"modules/helper/#status","text":"See also: Status","title":"Status ()"},{"location":"modules/helper/#logger","text":"See also: logger","title":"logger ()"},{"location":"modules/helper/#prompt","text":"See also: prompt","title":"prompt ()"},{"location":"modules/helper/#util","text":"See also: util","title":"util ()"},{"location":"modules/helper/#dotenv","text":"See also: dotenv","title":"dotenv ()"},{"location":"modules/helper/#extensions","text":"See also: extensions","title":"extensions ()"},{"location":"modules/helper/#color","text":"See also: color","title":"color ()"},{"location":"modules/helper/#tabular","text":"color","title":"tabular ()"},{"location":"modules/helper/#lua","text":"See also: lua","title":"lua ()"},{"location":"modules/logger/","text":"Module logger A module to make logging with colors easier Functions Property Description palette () An internal table to store the current palette render (text, env) Renders text put in Tables Property Description colors A table containing color bit values Functions palette () An internal table to store the current palette render (text, env) Renders text put in Parameters Type Optional Default Description text string \u274c none The text to render with color env optional table \u274c none Some variables you can add to the renderer Returns: string rendered The rendered te Tables colors A table containing color bit values Fields Type Optional Default Description 8 \u274c none 8 bit colors 16 \u274c none 16 bit colors 256 \u274c none Some 256 bit colors","title":"logger"},{"location":"modules/logger/#module-logger","text":"A module to make logging with colors easier","title":"Module logger"},{"location":"modules/logger/#functions","text":"Property Description palette () An internal table to store the current palette render (text, env) Renders text put in","title":"Functions"},{"location":"modules/logger/#tables","text":"Property Description colors A table containing color bit values","title":"Tables"},{"location":"modules/logger/#functions_1","text":"","title":"Functions"},{"location":"modules/logger/#palette","text":"An internal table to store the current palette","title":"palette ()"},{"location":"modules/logger/#render-text-env","text":"Renders text put in Parameters Type Optional Default Description text string \u274c none The text to render with color env optional table \u274c none Some variables you can add to the renderer Returns: string rendered The rendered te","title":"render (text, env)"},{"location":"modules/logger/#tables_1","text":"","title":"Tables"},{"location":"modules/logger/#colors","text":"A table containing color bit values Fields Type Optional Default Description 8 \u274c none 8 bit colors 16 \u274c none 16 bit colors 256 \u274c none Some 256 bit colors","title":"colors"},{"location":"modules/lua/","text":"Module lua Allows lua to create and extend classes Functions Property Description class (name, tbl, extend, setup) Create a moonscript class Functions class (name, tbl, extend, setup) Create a moonscript class Parameters Type Optional Default Description name string \u274c none The name of the class tbl table \u274c none Methods to add to the class extend table or boolean \u274c none The class to extend or false setup function \u274c none The new method of the class Returns: table The class that was creat","title":"lua"},{"location":"modules/lua/#module-lua","text":"Allows lua to create and extend classes","title":"Module lua"},{"location":"modules/lua/#functions","text":"Property Description class (name, tbl, extend, setup) Create a moonscript class","title":"Functions"},{"location":"modules/lua/#functions_1","text":"","title":"Functions"},{"location":"modules/lua/#class-name-tbl-extend-setup","text":"Create a moonscript class Parameters Type Optional Default Description name string \u274c none The name of the class tbl table \u274c none Methods to add to the class extend table or boolean \u274c none The class to extend or false setup function \u274c none The new method of the class Returns: table The class that was creat","title":"class (name, tbl, extend, setup)"},{"location":"modules/util/","text":"Module util A utility module for time, moderation, and permissions Functions Property Description years (years) Convert years into milliseconds weeks (weeks) Convert weeks into milliseconds days (days) Convert days into milliseconds hours (hours) Convert hours into milliseconds minutes (minutes) Convert minutes into milliseconds seconds (seconds) Convert seconds into milliseconds formatLong (milliseconds) Convert milliseconds into a long formatted time; eg 10 days plural (ms, msAbs, n, name) Check if a time should be plural bulkDelete (msg, messages) Bulk delete messages in a channel using getMessages compareRoles (role1, role2) Compare 2 roles positions manageable (member) Compare 2 roles positions checkPerm (member, channel, permissions) Check if the member has permissions or a role override Functions years (years) Convert years into milliseconds Parameters Type Optional Default Description years number \u274c none Returns: number millisecon weeks (weeks) Convert weeks into milliseconds Parameters Type Optional Default Description weeks number \u274c none Returns: number millisecon days (days) Convert days into milliseconds Parameters Type Optional Default Description days number \u274c none Returns: number millisecon hours (hours) Convert hours into milliseconds Parameters Type Optional Default Description hours number \u274c none Returns: number millisecon minutes (minutes) Convert minutes into milliseconds Parameters Type Optional Default Description minutes number \u274c none Returns: number millisecon seconds (seconds) Convert seconds into milliseconds Parameters Type Optional Default Description seconds number \u274c none Returns: number millisecon formatLong (milliseconds) Convert milliseconds into a long formatted time; eg 10 days Parameters Type Optional Default Description milliseconds number \u274c none Returns: string formatt plural (ms, msAbs, n, name) Check if a time should be plural Parameters Type Optional Default Description ms number \u274c none msAbs number \u274c none Absolute value of the milliseconds n number \u274c none The amount of milliseconds in the unit name string \u274c none The name of the unit eg second Returns: string Name with possibly an bulkDelete (msg, messages) Bulk delete messages in a channel using getMessages Parameters Type Optional Default Description msg \u274c none The message you got the call to bulk delete messages table or number \u274c none Returns: {table,...} The messages that were delet compareRoles (role1, role2) Compare 2 roles positions Parameters Type Optional Default Description role1 \u274c none The first role to compare role2 \u274c none The second role to compare Returns: number The distance from first role to seco manageable (member) Compare 2 roles positions Parameters Type Optional Default Description member \u274c none The member to see if the bot can manage Returns: boolean If true, the bot can manage the member, else than n checkPerm (member, channel, permissions) Check if the member has permissions or a role override Parameters Type Optional Default Description member \u274c none The member to check the permissions of channel \u274c none The channel that the member is using permissions table \u274c none The permissions you want to check, eg kickMembers","title":"util"},{"location":"modules/util/#module-util","text":"A utility module for time, moderation, and permissions","title":"Module util"},{"location":"modules/util/#functions","text":"Property Description years (years) Convert years into milliseconds weeks (weeks) Convert weeks into milliseconds days (days) Convert days into milliseconds hours (hours) Convert hours into milliseconds minutes (minutes) Convert minutes into milliseconds seconds (seconds) Convert seconds into milliseconds formatLong (milliseconds) Convert milliseconds into a long formatted time; eg 10 days plural (ms, msAbs, n, name) Check if a time should be plural bulkDelete (msg, messages) Bulk delete messages in a channel using getMessages compareRoles (role1, role2) Compare 2 roles positions manageable (member) Compare 2 roles positions checkPerm (member, channel, permissions) Check if the member has permissions or a role override","title":"Functions"},{"location":"modules/util/#functions_1","text":"","title":"Functions"},{"location":"modules/util/#years-years","text":"Convert years into milliseconds Parameters Type Optional Default Description years number \u274c none Returns: number millisecon","title":"years (years)"},{"location":"modules/util/#weeks-weeks","text":"Convert weeks into milliseconds Parameters Type Optional Default Description weeks number \u274c none Returns: number millisecon","title":"weeks (weeks)"},{"location":"modules/util/#days-days","text":"Convert days into milliseconds Parameters Type Optional Default Description days number \u274c none Returns: number millisecon","title":"days (days)"},{"location":"modules/util/#hours-hours","text":"Convert hours into milliseconds Parameters Type Optional Default Description hours number \u274c none Returns: number millisecon","title":"hours (hours)"},{"location":"modules/util/#minutes-minutes","text":"Convert minutes into milliseconds Parameters Type Optional Default Description minutes number \u274c none Returns: number millisecon","title":"minutes (minutes)"},{"location":"modules/util/#seconds-seconds","text":"Convert seconds into milliseconds Parameters Type Optional Default Description seconds number \u274c none Returns: number millisecon","title":"seconds (seconds)"},{"location":"modules/util/#formatlong-milliseconds","text":"Convert milliseconds into a long formatted time; eg 10 days Parameters Type Optional Default Description milliseconds number \u274c none Returns: string formatt","title":"formatLong (milliseconds)"},{"location":"modules/util/#plural-ms-msabs-n-name","text":"Check if a time should be plural Parameters Type Optional Default Description ms number \u274c none msAbs number \u274c none Absolute value of the milliseconds n number \u274c none The amount of milliseconds in the unit name string \u274c none The name of the unit eg second Returns: string Name with possibly an","title":"plural (ms, msAbs, n, name)"},{"location":"modules/util/#bulkdelete-msg-messages","text":"Bulk delete messages in a channel using getMessages Parameters Type Optional Default Description msg \u274c none The message you got the call to bulk delete messages table or number \u274c none Returns: {table,...} The messages that were delet","title":"bulkDelete (msg, messages)"},{"location":"modules/util/#compareroles-role1-role2","text":"Compare 2 roles positions Parameters Type Optional Default Description role1 \u274c none The first role to compare role2 \u274c none The second role to compare Returns: number The distance from first role to seco","title":"compareRoles (role1, role2)"},{"location":"modules/util/#manageable-member","text":"Compare 2 roles positions Parameters Type Optional Default Description member \u274c none The member to see if the bot can manage Returns: boolean If true, the bot can manage the member, else than n","title":"manageable (member)"},{"location":"modules/util/#checkperm-member-channel-permissions","text":"Check if the member has permissions or a role override Parameters Type Optional Default Description member \u274c none The member to check the permissions of channel \u274c none The channel that the member is using permissions table \u274c none The permissions you want to check, eg kickMembers","title":"checkPerm (member, channel, permissions)"},{"location":"topics/01-simple-bot/","text":"Simple bot Comrade is a lightweight, safe framework built with MoonScript. Today we are going to make a simple Discord bot with Comrade and Discordia. Setup Before we can even start programming we need to get a bot token. Go to discord.com/developers and create a new application by clicking the New Application button. Give it a good name like Fun Bot . Now go navigate to the tab named Bot then click Add Bot . Make sure you confirm with Yes, do it! Now you should see TOKEN and under it Copy . Click the copy button and write it down somewhere. Installation Luvit You are going to need Luvit . Now you need to add it to your path. On Windows These are the steps to add Luvit (that is luvit, luvi, lit) to your system PATH on Windows. I recommend you follw this general guide . On Unix based systems Lets say you installed it at ~/luvit/ You can just do in your shell. You can also put it in your .profile export PATH = \" $HOME /luvit/: $PATH \" If you added it to your .profile source ~/.profile Git Another thing you are going to need is git . On Windows If you use windows then you want to use git bash Run it and install it. You can use this terminal instead of the command prompt. On Unix based systems If you are on a Unix based system then follow the instructions on the download page Comrade Now you need to install Comrade. This is mostly done with a git submodule. You can also git clone it into a directory. Make a new folder and open it in something like Visual Studio Code. If you are using Visual Studio Code you can press control + shift + ` This brings up the terminal, now with the terminal open you want to type git init . You want to now run lit install SinisterRectus/discordia . This installs discordia which Comrade depends on. Once that is done you can run git submodule add https://github.com/comrade-project/Comrade.git deps/Comrade . Now you should see some new files. These new files should be .gitmodules and a folder in deps called Comrade. Starting up Now we can create a new file called main.lua and .env . Make sure that these files don't have .txt at the end or something. In .env we have TOKEN=<Your bot token> Make sure you replace <Your bot token> with your actual bot token we got from setup In our main.lua we can have local comrade = require 'Comrade' -- Bring in our module local client , dotenv = comrade . Client , comrade . dotenv -- Import what we need from the module dotenv . config () -- Load our .env local bot = client ( process . env . TOKEN ) -- Create a client bot : login () -- Log into Discord If we run it we should get 2 files generated. A discordia.log and a gateway.json . Around about now we should create a .gitignore This file prevents us from committing our private data. *.log *.env gateway.json In Visual Studio Code you should see these items go gray. This means that its ignored. First command Now we want some functionality from this bot. We do with with a command. -- command.lua local comrade = require 'Comrade' -- Bring in our module local command = comrade . LuaCommand -- The Lua helper local comm = command 'example' -- Create a command named example function comm : execute ( msg ) -- Create our executer function msg : reply 'Some command' -- When its called reply with Some command end return comm : make () -- Generate a readable command A lot of it is boilerplate and all you really need is the execute function. If you want to know more about this you can check out the Command class. Now in our main.lua we can import it. -- main.lua local comrade = require 'Comrade' -- Bring in our module local client , dotenv = comrade . Client , comrade . dotenv -- Import what we need from the module dotenv . config () -- Load our .env local bot = client ( process . env . TOKEN ) -- Create a client bot : addCommand ( require './command' ()) -- Add the command to the bot bot : login () -- Log into Discord Now we can go into a server with the bot. If we type !help we should see example, help Now run !example and you should see Some command . If this all went to plan you have made your first command! Client options You probably want to change the prefix and some other things. This is done with a client config, here is some self explanatory code. local bot = client ( process . env . TOKEN , { prefix = '!' , -- The prefix which the bot will respond to defaultHelp = true , -- To have the default help command loaded owners = {}, -- People who have complete control of the bot testing = false , -- If the bot is in testing mode or not testbot = false , -- If the current bot is a test bot botid = nil , -- The test bot id storeErrors = false , -- To store errors in a table disableDefaultCH = false , -- To disable the default command handler, mostly for custom prefixes -- Rest are from https://github.com/SinisterRectus/Discordia/wiki/Client-options }) First plugin A plugin is a collection of events and commands. For example a plugin used in little commander is a welcoming plugin. In lua, currently its not so pretty. -- plugin.lua local comrade = require 'Comrade' -- Bring in our module local plugin , lua = comrade . Plugin , comrade . lua -- Import what we need return lua . class ( 'name' , {}, plugin , function ( self ) -- Create our plugin self : super ( self , 'new' ) -- Super it lua . class ( 'example' , { -- Create our command execute = function ( _ , msg , args ) -- We drop first argument as its self msg : reply 'Some command' end }, self . command , function ( self ) -- Our setup function self : super ( self , 'new' ) -- Command options end ) end ) Now in our main.lua we comment out the loading of our command. Plugins are loaded differently to commands. Instead of telling the client to load it, we tell the plugin to load it. -- main.lua local comrade = require 'Comrade' -- Bring in our module local client , dotenv = comrade . Client , comrade . dotenv -- Import what we need from the module dotenv . config () -- Load our .env local bot = client ( process . env . TOKEN ) -- Create a client --bot:addCommand(require './command'()) -- Add the command to the bot require './plugin' : use ( bot ) -- Load the plugin bot : login () -- Log into Discord Thats about it besides events. Next tutorial we will get more in depth with some of the classes. Resources Comrade Discordia Luvit Lua","title":"Simple bot"},{"location":"topics/01-simple-bot/#simple-bot","text":"Comrade is a lightweight, safe framework built with MoonScript. Today we are going to make a simple Discord bot with Comrade and Discordia.","title":"Simple bot"},{"location":"topics/01-simple-bot/#setup","text":"Before we can even start programming we need to get a bot token. Go to discord.com/developers and create a new application by clicking the New Application button. Give it a good name like Fun Bot . Now go navigate to the tab named Bot then click Add Bot . Make sure you confirm with Yes, do it! Now you should see TOKEN and under it Copy . Click the copy button and write it down somewhere.","title":"Setup"},{"location":"topics/01-simple-bot/#installation","text":"","title":"Installation"},{"location":"topics/01-simple-bot/#luvit","text":"You are going to need Luvit . Now you need to add it to your path.","title":"Luvit"},{"location":"topics/01-simple-bot/#on-windows","text":"These are the steps to add Luvit (that is luvit, luvi, lit) to your system PATH on Windows. I recommend you follw this general guide .","title":"On Windows"},{"location":"topics/01-simple-bot/#on-unix-based-systems","text":"Lets say you installed it at ~/luvit/ You can just do in your shell. You can also put it in your .profile export PATH = \" $HOME /luvit/: $PATH \" If you added it to your .profile source ~/.profile","title":"On Unix based systems"},{"location":"topics/01-simple-bot/#git","text":"Another thing you are going to need is git .","title":"Git"},{"location":"topics/01-simple-bot/#on-windows_1","text":"If you use windows then you want to use git bash Run it and install it. You can use this terminal instead of the command prompt.","title":"On Windows"},{"location":"topics/01-simple-bot/#on-unix-based-systems_1","text":"If you are on a Unix based system then follow the instructions on the download page","title":"On Unix based systems"},{"location":"topics/01-simple-bot/#comrade","text":"Now you need to install Comrade. This is mostly done with a git submodule. You can also git clone it into a directory. Make a new folder and open it in something like Visual Studio Code. If you are using Visual Studio Code you can press control + shift + ` This brings up the terminal, now with the terminal open you want to type git init . You want to now run lit install SinisterRectus/discordia . This installs discordia which Comrade depends on. Once that is done you can run git submodule add https://github.com/comrade-project/Comrade.git deps/Comrade . Now you should see some new files. These new files should be .gitmodules and a folder in deps called Comrade.","title":"Comrade"},{"location":"topics/01-simple-bot/#starting-up","text":"Now we can create a new file called main.lua and .env . Make sure that these files don't have .txt at the end or something. In .env we have TOKEN=<Your bot token> Make sure you replace <Your bot token> with your actual bot token we got from setup In our main.lua we can have local comrade = require 'Comrade' -- Bring in our module local client , dotenv = comrade . Client , comrade . dotenv -- Import what we need from the module dotenv . config () -- Load our .env local bot = client ( process . env . TOKEN ) -- Create a client bot : login () -- Log into Discord If we run it we should get 2 files generated. A discordia.log and a gateway.json . Around about now we should create a .gitignore This file prevents us from committing our private data. *.log *.env gateway.json In Visual Studio Code you should see these items go gray. This means that its ignored.","title":"Starting up"},{"location":"topics/01-simple-bot/#first-command","text":"Now we want some functionality from this bot. We do with with a command. -- command.lua local comrade = require 'Comrade' -- Bring in our module local command = comrade . LuaCommand -- The Lua helper local comm = command 'example' -- Create a command named example function comm : execute ( msg ) -- Create our executer function msg : reply 'Some command' -- When its called reply with Some command end return comm : make () -- Generate a readable command A lot of it is boilerplate and all you really need is the execute function. If you want to know more about this you can check out the Command class. Now in our main.lua we can import it. -- main.lua local comrade = require 'Comrade' -- Bring in our module local client , dotenv = comrade . Client , comrade . dotenv -- Import what we need from the module dotenv . config () -- Load our .env local bot = client ( process . env . TOKEN ) -- Create a client bot : addCommand ( require './command' ()) -- Add the command to the bot bot : login () -- Log into Discord Now we can go into a server with the bot. If we type !help we should see example, help Now run !example and you should see Some command . If this all went to plan you have made your first command!","title":"First command"},{"location":"topics/01-simple-bot/#client-options","text":"You probably want to change the prefix and some other things. This is done with a client config, here is some self explanatory code. local bot = client ( process . env . TOKEN , { prefix = '!' , -- The prefix which the bot will respond to defaultHelp = true , -- To have the default help command loaded owners = {}, -- People who have complete control of the bot testing = false , -- If the bot is in testing mode or not testbot = false , -- If the current bot is a test bot botid = nil , -- The test bot id storeErrors = false , -- To store errors in a table disableDefaultCH = false , -- To disable the default command handler, mostly for custom prefixes -- Rest are from https://github.com/SinisterRectus/Discordia/wiki/Client-options })","title":"Client options"},{"location":"topics/01-simple-bot/#first-plugin","text":"A plugin is a collection of events and commands. For example a plugin used in little commander is a welcoming plugin. In lua, currently its not so pretty. -- plugin.lua local comrade = require 'Comrade' -- Bring in our module local plugin , lua = comrade . Plugin , comrade . lua -- Import what we need return lua . class ( 'name' , {}, plugin , function ( self ) -- Create our plugin self : super ( self , 'new' ) -- Super it lua . class ( 'example' , { -- Create our command execute = function ( _ , msg , args ) -- We drop first argument as its self msg : reply 'Some command' end }, self . command , function ( self ) -- Our setup function self : super ( self , 'new' ) -- Command options end ) end ) Now in our main.lua we comment out the loading of our command. Plugins are loaded differently to commands. Instead of telling the client to load it, we tell the plugin to load it. -- main.lua local comrade = require 'Comrade' -- Bring in our module local client , dotenv = comrade . Client , comrade . dotenv -- Import what we need from the module dotenv . config () -- Load our .env local bot = client ( process . env . TOKEN ) -- Create a client --bot:addCommand(require './command'()) -- Add the command to the bot require './plugin' : use ( bot ) -- Load the plugin bot : login () -- Log into Discord Thats about it besides events. Next tutorial we will get more in depth with some of the classes.","title":"First plugin"},{"location":"topics/01-simple-bot/#resources","text":"Comrade Discordia Luvit Lua","title":"Resources"},{"location":"topics/02-embed-events/","text":"Embeds and events This tutorial assumes that you have followed part 1, Simple bot Embeds So, there are 2 forms of embeds. This is the standard embed and the template embed. We are going to start with the normal embed. Now we want to open our plugin we made. -- plugin.lua local comrade = require 'Comrade' -- Bring in our module local plugin , Embed , lua = comrade . Plugin , comrade . Embed , comrade . lua -- Import what we need return lua . class ( 'name' , {}, plugin , function ( self ) -- Create our plugin self : super ( self , 'new' ) -- Super it lua . class ( 'example' , { -- Create our command execute = function ( _ , msg , args ) -- We drop first argument as its self local myEmbed = Embed () -- Create our embed end }, self . command , function ( self ) -- Our setup function self : super ( self , 'new' ) -- Command options end ) end ) The change we did is bringing in Embed and creating one. Now, embed takes an optional method. This would be the initial state, usually you would do this with small embeds. -- plugin.lua -- ... execute = function ( _ , msg , args ) -- We drop first argument as its self local myEmbed = Embed ({ title = 'Fun embed' }) -- Create our embed end -- ... We can't send this embed down to the channel like this. msg : reply ( myEmbed ) This is since Discordia will not read the embed data from the embed class. It does not understand what it is. In order to make Discordia send this there are 2 ways. -- Way 1 msg : reply ( myEmbed : toJSON ()) -- Way 2 myEmbed : send ( msg . channel ) Way 2 is usually the better method as it runs checks. It checks if it can, Send messages Read messages Embed links This makes it harder to get a 403 error. It still can happen like with dms but thats a given. Now, lets look at the docs for the embed . We see there are quite a lot of methods. All of these methods edit the look of the embed. Instead of setting title in the initial state we can do local myEmbed = Embed () myEmbed : setTitle ( 'Fun embed' ) Usually you want to use these set methods. This is since, like with sending, they have limits put into place. Titles are cut at 256 characters Descriptions are cut at 2048 characters Fields are limited to 25 fields Names of fields are cut at 256 characters Value of fields are cut as 1024 characters Footers are cut at 2048 characters Author names are cut at 256 characters The only limit not followed is the 6000 character limit. This is since it would lower performance checking every since text field when editing text. You can also chain methods as so local myEmbed = Embed () : setColor ( 0x0099ff ) : setTitle ( 'Some title' ) : setURL ( 'https://comrade-project.github.io/Comrade' ) : setAuthor ( 'Some name' , 'https://i.imgur.com/54BWIT5.png' , 'https://comrade-project.github.io/Comrade' ) : setDescription ( 'Some description here' ) : setThumbnail ( 'https://comrade-project.github.io/Comrade' ) : addFields ( { name = 'Regular field title' , value = 'Some value here' }, { name = 'Inline field title' , value = 'Some value here' , inline = true } ) : addField ( 'Inline field title' , 'Some value here' , true ) : setImage ( 'https://i.imgur.com/54BWIT5.png' ) : setTimestamp () : setFooter ( 'Some footer text here' , 'https://i.imgur.com/54BWIT5.png' ) myEmbed : send ( msg . channel ) This chaining allows for some neat syntactical sugar. This is very cool and stuff but we can step it up to another level. Templates Now, you may ask, what is a template? A template is an embed in which we can use to either make more embeds or an embed itself. You have 2 choices of template languages, mustache and etlua . Here is an example of a mustache template local level = Template { -- They extend embeds meaning that they allow for starting points title = '{{user}} just got to level {{level}}' description = '{{user}} got to level {{level}}! You now have {{coins}} coins!' } level : render ({ user = '4 times 1 is even less than 0#3870' , level = 5 , coins = '2' }): send ( channel ) This will fill in any of the {{template}} variables if they exist. In order to use etlua you need to pass the second variable as true. local level = Template ({ title = '<%- fun %>' }, true ) level : render ({ fun = 'yes' }): send ( channel ) These templates come in handy A LOT when it comes to prompts (Branched prompts). Next tutorial or so we will talk about prompts. There is a time to use etlua vs mustache. If you don't have to use etlua, then don't use it. Etlua is a generally heavier renderer as it compiles the templates down to lua. This makes it take more time than mustache which does not have to load any lua code whatsoever. Events Now, how might we listen to events you may ask. Well its actually quite simple. Lets go create a file named reactionAdd.lua . You should name your events what they are listening for. This is strictly not needed but it helps sort them out. We are going to do some organization in the next tutorial as well. -- reactionAdd.lua local comrade = require 'Comrade' -- Bring in our module local lua = comrade . lua -- The lua helper lua . class ( 'reactionAdd' , { execute = function ( channel , messageId , hash , userId ) -- Do something end }, event , function ( self ) self : super ( self , 'new' ) -- Options aka once self . once = false -- If this should be done only once end ) Now, you may ask, how do we add it? Well its quite trivial. Its almost the same way you add a command. -- main.lua local comrade = require 'Comrade' -- Bring in our module local client , dotenv = comrade . Client , comrade . dotenv -- Import what we need from the module dotenv . config () -- Load our .env local bot = client ( process . env . TOKEN ) -- Create a client --bot:addCommand(require './command'()) -- Add the command to the bot bot : addEvent ( require './reactionAdd' ()) -- Add the event to the bot require './plugin' : use ( bot ) -- Load the plugin bot : login () -- Log into Discord Something else we can do is put it into a plugin. -- plugin.lua local comrade = require 'Comrade' -- Bring in our module local plugin , lua = comrade . Plugin , comrade . lua -- Import what we need return lua . class ( 'name' , {}, plugin , function ( self ) -- Create our plugin self : super ( self , 'new' ) -- Super it lua . class ( 'example' , { -- Create our command execute = function ( _ , msg , args ) -- We drop first argument as its self msg : reply 'Some command' end }, self . command , function ( self ) -- Our setup function self : super ( self , 'new' ) -- Command options end ) lua . class ( 'reactionAdd' , { execute = function ( channel , messageId , hash , userId ) -- Do something end }, self . event , function ( self ) self : super ( self , 'new' ) -- Options aka once self . once = false -- If this should be done only once end ) end ) And we can comment out the require on our event -- main.lua -- ... -- bot:addEvent(require './reactionAdd'()) -- Add the event to the bot -- ... Now, next tutorial as I said will be some cleaning up and prompts.","title":"Embeds and events"},{"location":"topics/02-embed-events/#embeds-and-events","text":"This tutorial assumes that you have followed part 1, Simple bot","title":"Embeds and events"},{"location":"topics/02-embed-events/#embeds","text":"So, there are 2 forms of embeds. This is the standard embed and the template embed. We are going to start with the normal embed. Now we want to open our plugin we made. -- plugin.lua local comrade = require 'Comrade' -- Bring in our module local plugin , Embed , lua = comrade . Plugin , comrade . Embed , comrade . lua -- Import what we need return lua . class ( 'name' , {}, plugin , function ( self ) -- Create our plugin self : super ( self , 'new' ) -- Super it lua . class ( 'example' , { -- Create our command execute = function ( _ , msg , args ) -- We drop first argument as its self local myEmbed = Embed () -- Create our embed end }, self . command , function ( self ) -- Our setup function self : super ( self , 'new' ) -- Command options end ) end ) The change we did is bringing in Embed and creating one. Now, embed takes an optional method. This would be the initial state, usually you would do this with small embeds. -- plugin.lua -- ... execute = function ( _ , msg , args ) -- We drop first argument as its self local myEmbed = Embed ({ title = 'Fun embed' }) -- Create our embed end -- ... We can't send this embed down to the channel like this. msg : reply ( myEmbed ) This is since Discordia will not read the embed data from the embed class. It does not understand what it is. In order to make Discordia send this there are 2 ways. -- Way 1 msg : reply ( myEmbed : toJSON ()) -- Way 2 myEmbed : send ( msg . channel ) Way 2 is usually the better method as it runs checks. It checks if it can, Send messages Read messages Embed links This makes it harder to get a 403 error. It still can happen like with dms but thats a given. Now, lets look at the docs for the embed . We see there are quite a lot of methods. All of these methods edit the look of the embed. Instead of setting title in the initial state we can do local myEmbed = Embed () myEmbed : setTitle ( 'Fun embed' ) Usually you want to use these set methods. This is since, like with sending, they have limits put into place. Titles are cut at 256 characters Descriptions are cut at 2048 characters Fields are limited to 25 fields Names of fields are cut at 256 characters Value of fields are cut as 1024 characters Footers are cut at 2048 characters Author names are cut at 256 characters The only limit not followed is the 6000 character limit. This is since it would lower performance checking every since text field when editing text. You can also chain methods as so local myEmbed = Embed () : setColor ( 0x0099ff ) : setTitle ( 'Some title' ) : setURL ( 'https://comrade-project.github.io/Comrade' ) : setAuthor ( 'Some name' , 'https://i.imgur.com/54BWIT5.png' , 'https://comrade-project.github.io/Comrade' ) : setDescription ( 'Some description here' ) : setThumbnail ( 'https://comrade-project.github.io/Comrade' ) : addFields ( { name = 'Regular field title' , value = 'Some value here' }, { name = 'Inline field title' , value = 'Some value here' , inline = true } ) : addField ( 'Inline field title' , 'Some value here' , true ) : setImage ( 'https://i.imgur.com/54BWIT5.png' ) : setTimestamp () : setFooter ( 'Some footer text here' , 'https://i.imgur.com/54BWIT5.png' ) myEmbed : send ( msg . channel ) This chaining allows for some neat syntactical sugar. This is very cool and stuff but we can step it up to another level.","title":"Embeds"},{"location":"topics/02-embed-events/#templates","text":"Now, you may ask, what is a template? A template is an embed in which we can use to either make more embeds or an embed itself. You have 2 choices of template languages, mustache and etlua . Here is an example of a mustache template local level = Template { -- They extend embeds meaning that they allow for starting points title = '{{user}} just got to level {{level}}' description = '{{user}} got to level {{level}}! You now have {{coins}} coins!' } level : render ({ user = '4 times 1 is even less than 0#3870' , level = 5 , coins = '2' }): send ( channel ) This will fill in any of the {{template}} variables if they exist. In order to use etlua you need to pass the second variable as true. local level = Template ({ title = '<%- fun %>' }, true ) level : render ({ fun = 'yes' }): send ( channel ) These templates come in handy A LOT when it comes to prompts (Branched prompts). Next tutorial or so we will talk about prompts. There is a time to use etlua vs mustache. If you don't have to use etlua, then don't use it. Etlua is a generally heavier renderer as it compiles the templates down to lua. This makes it take more time than mustache which does not have to load any lua code whatsoever.","title":"Templates"},{"location":"topics/02-embed-events/#events","text":"Now, how might we listen to events you may ask. Well its actually quite simple. Lets go create a file named reactionAdd.lua . You should name your events what they are listening for. This is strictly not needed but it helps sort them out. We are going to do some organization in the next tutorial as well. -- reactionAdd.lua local comrade = require 'Comrade' -- Bring in our module local lua = comrade . lua -- The lua helper lua . class ( 'reactionAdd' , { execute = function ( channel , messageId , hash , userId ) -- Do something end }, event , function ( self ) self : super ( self , 'new' ) -- Options aka once self . once = false -- If this should be done only once end ) Now, you may ask, how do we add it? Well its quite trivial. Its almost the same way you add a command. -- main.lua local comrade = require 'Comrade' -- Bring in our module local client , dotenv = comrade . Client , comrade . dotenv -- Import what we need from the module dotenv . config () -- Load our .env local bot = client ( process . env . TOKEN ) -- Create a client --bot:addCommand(require './command'()) -- Add the command to the bot bot : addEvent ( require './reactionAdd' ()) -- Add the event to the bot require './plugin' : use ( bot ) -- Load the plugin bot : login () -- Log into Discord Something else we can do is put it into a plugin. -- plugin.lua local comrade = require 'Comrade' -- Bring in our module local plugin , lua = comrade . Plugin , comrade . lua -- Import what we need return lua . class ( 'name' , {}, plugin , function ( self ) -- Create our plugin self : super ( self , 'new' ) -- Super it lua . class ( 'example' , { -- Create our command execute = function ( _ , msg , args ) -- We drop first argument as its self msg : reply 'Some command' end }, self . command , function ( self ) -- Our setup function self : super ( self , 'new' ) -- Command options end ) lua . class ( 'reactionAdd' , { execute = function ( channel , messageId , hash , userId ) -- Do something end }, self . event , function ( self ) self : super ( self , 'new' ) -- Options aka once self . once = false -- If this should be done only once end ) end ) And we can comment out the require on our event -- main.lua -- ... -- bot:addEvent(require './reactionAdd'()) -- Add the event to the bot -- ... Now, next tutorial as I said will be some cleaning up and prompts.","title":"Events"},{"location":"topics/readme/","text":"Discordia Tutorial This tutorial series goes over making a bot using Comrade , a helper library. Tutorials Simple bot Setup Basic command Basic plugin Embed events Embeds Templates Events","title":"Discordia Tutorial"},{"location":"topics/readme/#discordia-tutorial","text":"This tutorial series goes over making a bot using Comrade , a helper library.","title":"Discordia Tutorial"},{"location":"topics/readme/#tutorials","text":"","title":"Tutorials"},{"location":"topics/readme/#simple-bot","text":"Setup Basic command Basic plugin","title":"Simple bot"},{"location":"topics/readme/#embed-events","text":"Embeds Templates Events","title":"Embed events"}]}